/****************************************************
* Name: Joseph
* Class: CS40S
* Assignment: Project 2, Text Editor
* Input: None, just from GUI
* Output: None
*****************************************************/

package project2;

/***************************************
* all the imports I shall implementing
* Didn't want to be lazy and import
* an entire collection of libraries
****************************************/

// handling reading and writing of files
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.FileReader;

// error handling imports
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileNotFoundException;
import java.io.IOException;

// file chooser import
import javax.swing.JFileChooser;
import java.io.File;

// import for joptionpane
import javax.swing.JOptionPane;

// imports for copy, cut and paste functionalities
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;

/**
 *
 * @author tafese-j
 */
public class TextEditor extends javax.swing.JFrame {
    
    // file chooser interface, dialog
    private JFileChooser fc = new JFileChooser();  
    // write files
    private PrintWriter p;  
    // copy and paste from clipboard
    private Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
    // store string to be copied / cut
    StringSelection stringSelection;
    
    public TextEditor() {
        initComponents();
        enteredText.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        enteredText = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        SaveAs = new javax.swing.JMenu();
        saveAs = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenu();
        Cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Joe's Text Editor");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        enteredText.setColumns(20);
        enteredText.setLineWrap(true);
        enteredText.setRows(5);
        jScrollPane1.setViewportView(enteredText);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        SaveAs.setText("File");

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs.setText("Save As");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        SaveAs.add(saveAs);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        SaveAs.add(Save);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        SaveAs.add(Open);

        jMenuBar1.add(SaveAs);

        Copy.setText("Edit");

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        Copy.add(Cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        Copy.add(copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Copy.add(Paste);

        jMenuBar1.add(Copy);

        jMenu1.setText("Exit");

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Purpose: Copy to system clipboard
    // Input: None
    // Output: None
    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
       
        if (enteredText.getSelectedText() != null) {
            
            String m = enteredText.getSelectedText();
            stringSelection = new StringSelection(m);
            clpbrd.setContents(stringSelection, null);
        }
        else{
            JOptionPane.showMessageDialog(null, "Nothing to Copy!");
        }

    }//GEN-LAST:event_copyActionPerformed

    // Purpose: saveAs file action
    // Input: None
    // Output: None
    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsActionPerformed

    // Purpose: save file action
    // Input: None
    // Output: None
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        save();
    }//GEN-LAST:event_SaveActionPerformed

    // Purpose: open file action 
    // Input: None
    // Output: None
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        try {
                        openFile();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(TextEditor.class.getName()).
                                log(Level.SEVERE, null, ex);
                        System.out.println("OPEN FILE" + ex);
                    } catch (IOException ex) {
                        Logger.getLogger(TextEditor.class.getName()).
                                log(Level.SEVERE, null, ex);
                        System.out.println("OPEN FILE" + ex);
                    }
    }//GEN-LAST:event_OpenActionPerformed

    // Purpose: Exit file
    // Input: None
    // Output: None
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
         System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    // Purpose: Paste text
    // Input: None
    // Output: None
    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed

        Transferable t = clpbrd.getContents(this);
        if (t == null){
            JOptionPane.showMessageDialog(null, "Nothing to Paste!");
            return;
        } 
        try {
            enteredText.setText((String) t.getTransferData(DataFlavor.stringFlavor));
        } catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_PasteActionPerformed

    // Purpose: Cut text
    // Input: None
    // Output: None
    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed

        if (enteredText.getSelectedText() != null) {
            String myString = enteredText.getSelectedText();
            StringSelection stringSelection = new StringSelection(myString);
            Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
            clpbrd.setContents(stringSelection, null);
            
            enteredText.replaceSelection("");
        }
        else{
            JOptionPane.showMessageDialog(null, "Nothing to Cut!");
        }
    }//GEN-LAST:event_CutActionPerformed

    // Purpose: open file
    // Input: None
    // Output: None
    private void openFile() throws FileNotFoundException, IOException{
        
        // set directory to home directory
        fc.setCurrentDirectory(new File(System.getProperty("user.home")
                    + System.getProperty("file.separator")+ "Desktop"));
        // open and set dialog to a file opening file
        int r = fc.showOpenDialog(this);
        fc.setDialogTitle("Open");
        // gets selected file
        if (r == JFileChooser.APPROVE_OPTION) {
            File sFile = fc.getSelectedFile();
        try {
            Scanner f = new Scanner(new FileReader(sFile));
            
            String oText = "";
            
            while(f.hasNext()){
                oText += f.nextLine() + "\n";
            }
               
            enteredText.setText(oText);
            f.close();
        } catch (IOException ex) {
            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
        }

        } // end if
        else {
            System.out.println("No Selection ");
        }
    }
    
    // Purpose: saveAs file
    // Input: None
    // Output: None
    private void saveAs(){
        
         fc.setCurrentDirectory(new File(System.getProperty("user.home")
                    + System.getProperty("file.separator")+ "Desktop"));
        // get entered text to save
        String s = enteredText.getText();
       
        fc.setDialogTitle("Save As");
        int r = fc.showSaveDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            try {
                p = new PrintWriter(selectedFile+".txt");
                p.write(s);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
            p.close();
        } // end if
        enteredText.setText("");
    }
    
    // Purpose: (save) Get current file and write to it
    // Input: None
    // Output: None
    private void save(){
        try{
            // get entered text to save
            String enteredString = enteredText.getText();
            
                File selectFile = fc.getSelectedFile();
                try {
                    p = new PrintWriter(selectFile);
                    p.write(enteredString);
                    p.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println(ex);
                }
                enteredText.setText("");
           
            
        } catch(java.lang.NullPointerException e){
            JOptionPane.showMessageDialog(null, "Enter Input first");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenu SaveAs;
    private javax.swing.JMenuItem copy;
    private javax.swing.JTextArea enteredText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem saveAs;
    // End of variables declaration//GEN-END:variables
}
